[{"/usr/app/src/index.js":"1","/usr/app/src/App.js":"2"},{"size":504,"mtime":1633953022005,"results":"3","hashOfConfig":"4"},{"size":952,"mtime":1633953022005,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ieujf2",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/usr/app/src/index.js",[],"/usr/app/src/App.js",["11","12"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport logo from './logo.svg';\nimport axios from 'axios';\n\nfunction App() {\n  const [data, setData] = useState({});\n  \n  useEffect(async () => {\n    const result = await axios('/api/posts/',\n    );\n    setData(result.data);\n  });\n \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <p>\n          {data.data?data.data.length:\"vacio\"}\n        </p>\n        <ul>\n        {data.data?data.data.map((item)=><li>{item.title}</li>):\"vacio\"}\n        </ul>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Get Started with mern-docker\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;",{"ruleId":"13","severity":1,"message":"14","line":9,"column":3,"nodeType":"15","endLine":9,"endColumn":12,"suggestions":"16"},{"ruleId":"13","severity":1,"message":"17","line":9,"column":13,"nodeType":"18","endLine":13,"endColumn":4},"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setData'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["19"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",{"desc":"20","fix":"21"},"Add dependencies array: []",{"range":"22","text":"23"},[299,299],", []"]